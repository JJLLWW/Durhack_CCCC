COMMENTED SERVER CODE


"""
the server
"""

# our code
#IMPOTRING THE CREATED DATABASE AS A MODULE
import database as db
#IMPORTING SPECIFIC FUNCTIONS FROM THE DATABASE 
from database import verify_user, errmsg_from_code
#IMPORTING THE SEPERATE TRANSLATION CODE AS A MODULE
import translation as tl


#PRE-CREATED FUNCTIONS TO BE IMPORTED 
# third party
#IMPORTING THE MAIN SQL FUNCTIONALITY
import sqlite3
#IMPORTING THE REQUIRED ELEMENTS FROM FLASK
#FLASH TO SHOW MESSAGES TO THE USER
#REDIRECT TO SET UP URL REDIRECTS
#RENDER_TEMPLATE IS USED TO GENERATE OPUPUT FROM THE TEMPLATE FILES
#REQUEST TRACKS ALL URL REQUESTS MADE BY THE USER
from flask import Flask, flash, redirect, render_template, request, session, url_for
#MKDTWMP IS USED FOR MANAGING DELETION OF TEMPORARY DIRECTORY AND ITS CONTENTS
from tempfile import mkdtemp
from flask_session import Session
#WRAPS IS USED FOR UPDATING AND WRAPPING THE WRAPPER
from functools import wraps
from assistingFunctions import login_required
#IMPORTING THE SOCKETIO ALLOWS FOR THE BI-DIRECTIONAL COMMUNICATION BETWEEN THE TW0
#CLIENTS, WHICH IS CRITICAL FOR THE PROJECT FUNCTIONALITY
from flask_socketio import SocketIO

#STATEMENTS CONNECTING THE DATABASE TO THE WEB APPLICATION
con = sqlite3.connect("database.db", check_same_thread=False)
cursor = con.cursor()
db.create_tables(cursor)

# add stock users
#THESE TWO SAMPLE USERS WILL BE USED TO INITIALLY ACCESS THE DATABASE
db.add_user("jack wright", "pass", "none", 0, "jackwright@gmail.com", cursor)
db.add_user("jack wrong", "pass", "none", 0, "jackwrong@gmail.com", cursor)

#INITIALISING CONNECTIONS BETWEEN THE USERS
app = Flask(__name__)
sio = SocketIO(app)
#CONFIGURATION OF THE SESSIONS 
app.config["SESSION_FILE_DIR"] = mkdtemp()
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
app.secret_key = b'P\x87\xfc\xa9\xe6qQ~)8\x90D\x11\n\xb9\xa1'
Session(app)

#EACH SUB BLOCK BELOW CREATES A NEW REQUEST ROUTE, ALL FOLLOWING THE SAME STRUCTURE
#ON THE INITIAL LOADING OF THE  WEBPAGE THE HOME PAGE TEMPLATE IS  RENDERED
@app.route("/", methods=["GET","POST"])
@login_required
def index():
    return render_template("home.html")

@app.route("/login", methods=["GET", "POST"])
def login():
    session.clear()
    if request.method == "POST":
        username = request.form.get("username")
        if not username:
            flash("Please enter a correct username")
            return redirect("/login")
        password = request.form.get("password")
        if not password:
            flash("Please enter a password")
            return redirect("/login")
        print(username, password)
        verification = verify_user(username, password, cursor)
        if verification == db.SUCCESS:
            flash("Welcome back " + username + "!")
            session["username"] = username
            return redirect("/")
        elif verification == db.ERR_NOUSR:
            flash("Username " + username + " is invalid")
            return redirect("/login")
        else:
            flash("Password was incorrect")
            return redirect("/login")
    else:
        return render_template("login.html")

@app.route("/chat", methods=["GET", "POST"])
def chat():
    return render_template("chat.html")

@app.route("/register", methods=["GET", "POST"])
def register():
    session.clear()
    if request.method == "POST":
        username = request.form.get("username")
        if not username:
            flash("Please enter a correct username")
            return redirect("/register")
        password = request.form.get("password")
        confirmPass = request.form.get("confirmation")
        if not password or not confirmPass:
            flash("Please enter password(s)")
            return redirect("/register")
        email = request.form.get("email")
        prefs = request.form.get("myTags")
        lang = request.form.get
        
    else:
        return render_template("signup.html")

@app.route("/logout")
@login_required
def logout():
    """ Log user out """
    flash("Logged out.")
    session.clear()
    return redirect("/login")

#IN THIS ROUTING, THE CLIENTS ARE CONNECTED VIA THE SOCKETIO
@sio.on('connect')
def on_client_connect():
    print("client connected")
 
#HERE USING THE PRECREATED CONNECTION, THE MESSAGE IS SENT VIA THE TRANSLATION 
MODULES, TO THE RECIPIENT CLIENT 
@sio.on('msg_sent')
def on_msg_sent(json):
    txt = json['msg_txt']
    sio.emit('msg_from_serv', {'text': txt})

if __name__ == "__main__":
    app.run(port=5000)